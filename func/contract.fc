{- storage struct
    public_key: uint256,
    seqno: uint32,
    total: uint64
-}
{- errors:
    100 - invalid seqno
    101 - invalid signature
-}
{- internal methods -}
() save_data(int public_key, int seqno, int total) impure inline {
    var data = begin_cell()
        .store_uint(public_key, 256)
        .store_uint(seqno, 32)
        .store_uint(total, 64)
        .end_cell();
    set_data(data);
}

{- get methods -}
int seqno() impure method_id {
    var ds = get_data().begin_parse();
    ds~load_uint(256);
    return ds.preload_uint(32);
}

int get_stored_total() impure method_id {
    var ds = get_data().begin_parse();
    ds~load_uint(256);
    ds~load_uint(32);
    return ds.preload_uint(64);
}

{- recv methods -}
() recv_internal(slice msg_body) {

}

{- body struct:
    signature: bits 512,
    seqno: uint32,
    n: uint32
-}
() recv_external({-int balance, int msg_value, cell msg_full,-} slice msg_body) impure {
    ;; checks
    var signature = msg_body~load_bits(512);
    var cs = msg_body;
    var seqno = cs~load_uint(32);

    var ds = get_data().begin_parse();
    var (public_key, stored_seqno) = (ds~load_uint(256), ds~load_uint(32));

    throw_unless(100, seqno == stored_seqno);
    throw_unless(101, check_signature(slice_hash(msg_body), signature, public_key));

    ;; logic
    var n = cs~load_uint(32);
    var total = ds~load_uint(64);

    ;; save
    save_data(
        public_key,
        seqno + 1,
        total + n
    );
    accept_message();
}
